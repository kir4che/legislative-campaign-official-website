{
  "version": 3,
  "sources": ["../../@radix-ui/react-label/dist/packages/react/label/src/index.ts", "../../@radix-ui/react-label/dist/packages/react/label/src/Label.tsx", "../../@radix-ui/react-form/dist/packages/react/form/src/index.ts", "../../@radix-ui/react-form/dist/packages/react/form/src/Form.tsx"],
  "sourcesContent": ["export {\n  Label,\n  //\n  Root,\n} from './Label';\nexport type { LabelProps } from './Label';\n", "import * as React from 'react';\nimport { Primitive } from '@radix-ui/react-primitive';\n\nimport type * as Radix from '@radix-ui/react-primitive';\n\n/* -------------------------------------------------------------------------------------------------\n * Label\n * -----------------------------------------------------------------------------------------------*/\n\nconst NAME = 'Label';\n\ntype LabelElement = React.ElementRef<typeof Primitive.label>;\ntype PrimitiveLabelProps = Radix.ComponentPropsWithoutRef<typeof Primitive.label>;\ninterface LabelProps extends PrimitiveLabelProps {}\n\nconst Label = React.forwardRef<LabelElement, LabelProps>((props, forwardedRef) => {\n  return (\n    <Primitive.label\n      {...props}\n      ref={forwardedRef}\n      onMouseDown={(event) => {\n        props.onMouseDown?.(event);\n        // prevent text selection when double clicking label\n        if (!event.defaultPrevented && event.detail > 1) event.preventDefault();\n      }}\n    />\n  );\n});\n\nLabel.displayName = NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\nconst Root = Label;\n\nexport {\n  Label,\n  //\n  Root,\n};\nexport type { LabelProps };\n", "export {\n  createFormScope,\n  //\n  Form,\n  FormField,\n  FormLabel,\n  FormControl,\n  FormMessage,\n  FormValidityState,\n  FormSubmit,\n  //\n  Root,\n  Field,\n  Label,\n  Control,\n  Message,\n  ValidityState,\n  Submit,\n} from './Form';\n\nexport type {\n  FormProps,\n  FormFieldProps,\n  FormLabelProps,\n  FormControlProps,\n  FormMessageProps,\n  FormValidityStateProps,\n  FormSubmitProps,\n} from './Form';\n", "import * as React from 'react';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { useId } from '@radix-ui/react-id';\nimport { Label as LabelPrimitive } from '@radix-ui/react-label';\nimport { Primitive } from '@radix-ui/react-primitive';\n\nimport type * as Radix from '@radix-ui/react-primitive';\nimport type { Scope } from '@radix-ui/react-context';\n\ntype ScopedProps<P> = P & { __scopeForm?: Scope };\nconst [createFormContext, createFormScope] = createContextScope('Form');\n\n/* -------------------------------------------------------------------------------------------------\n * Form\n * -----------------------------------------------------------------------------------------------*/\n\nconst FORM_NAME = 'Form';\n\ntype ValidityMap = { [fieldName: string]: ValidityState | undefined };\ntype CustomMatcherEntriesMap = { [fieldName: string]: CustomMatcherEntry[] };\ntype CustomErrorsMap = { [fieldName: string]: Record<string, boolean> };\n\ntype ValidationContextValue = {\n  getFieldValidity(fieldName: string): ValidityState | undefined;\n  onFieldValidityChange(fieldName: string, validity: ValidityState): void;\n\n  getFieldCustomMatcherEntries(fieldName: string): CustomMatcherEntry[];\n  onFieldCustomMatcherEntryAdd(fieldName: string, matcherEntry: CustomMatcherEntry): void;\n  onFieldCustomMatcherEntryRemove(fieldName: string, matcherEntryId: string): void;\n\n  getFieldCustomErrors(fieldName: string): Record<string, boolean>;\n  onFieldCustomErrorsChange(fieldName: string, errors: Record<string, boolean>): void;\n\n  onFieldValiditionClear(fieldName: string): void;\n};\nconst [ValidationProvider, useValidationContext] =\n  createFormContext<ValidationContextValue>(FORM_NAME);\n\ntype MessageIdsMap = { [fieldName: string]: Set<string> };\n\ntype AriaDescriptionContextValue = {\n  onFieldMessageIdAdd(fieldName: string, id: string): void;\n  onFieldMessageIdRemove(fieldName: string, id: string): void;\n  getFieldDescription(fieldName: string): string | undefined;\n};\nconst [AriaDescriptionProvider, useAriaDescriptionContext] =\n  createFormContext<AriaDescriptionContextValue>(FORM_NAME);\n\ntype FormElement = React.ElementRef<typeof Primitive.form>;\ntype PrimitiveFormProps = Radix.ComponentPropsWithoutRef<typeof Primitive.form>;\ninterface FormProps extends PrimitiveFormProps {\n  onClearServerErrors?(): void;\n}\n\nconst Form = React.forwardRef<FormElement, FormProps>(\n  (props: ScopedProps<FormProps>, forwardedRef) => {\n    const { __scopeForm, onClearServerErrors = () => {}, ...rootProps } = props;\n    const formRef = React.useRef<HTMLFormElement>(null);\n    const composedFormRef = useComposedRefs(forwardedRef, formRef);\n\n    // native validity per field\n    const [validityMap, setValidityMap] = React.useState<ValidityMap>({});\n    const getFieldValidity: ValidationContextValue['getFieldValidity'] = React.useCallback(\n      (fieldName) => validityMap[fieldName],\n      [validityMap]\n    );\n    const handleFieldValidityChange: ValidationContextValue['onFieldValidityChange'] =\n      React.useCallback(\n        (fieldName, validity) =>\n          setValidityMap((prevValidityMap) => ({\n            ...prevValidityMap,\n            [fieldName]: { ...(prevValidityMap[fieldName] ?? {}), ...validity },\n          })),\n        []\n      );\n    const handleFieldValiditionClear: ValidationContextValue['onFieldValiditionClear'] =\n      React.useCallback((fieldName) => {\n        setValidityMap((prevValidityMap) => ({ ...prevValidityMap, [fieldName]: undefined }));\n        setCustomErrorsMap((prevCustomErrorsMap) => ({ ...prevCustomErrorsMap, [fieldName]: {} }));\n      }, []);\n\n    // custom matcher entries per field\n    const [customMatcherEntriesMap, setCustomMatcherEntriesMap] =\n      React.useState<CustomMatcherEntriesMap>({});\n    const getFieldCustomMatcherEntries: ValidationContextValue['getFieldCustomMatcherEntries'] =\n      React.useCallback(\n        (fieldName) => customMatcherEntriesMap[fieldName] ?? [],\n        [customMatcherEntriesMap]\n      );\n    const handleFieldCustomMatcherAdd: ValidationContextValue['onFieldCustomMatcherEntryAdd'] =\n      React.useCallback((fieldName, matcherEntry) => {\n        setCustomMatcherEntriesMap((prevCustomMatcherEntriesMap) => ({\n          ...prevCustomMatcherEntriesMap,\n          [fieldName]: [...(prevCustomMatcherEntriesMap[fieldName] ?? []), matcherEntry],\n        }));\n      }, []);\n    const handleFieldCustomMatcherRemove: ValidationContextValue['onFieldCustomMatcherEntryRemove'] =\n      React.useCallback((fieldName, matcherEntryId) => {\n        setCustomMatcherEntriesMap((prevCustomMatcherEntriesMap) => ({\n          ...prevCustomMatcherEntriesMap,\n          [fieldName]: (prevCustomMatcherEntriesMap[fieldName] ?? []).filter(\n            (matcherEntry) => matcherEntry.id !== matcherEntryId\n          ),\n        }));\n      }, []);\n\n    // custom errors per field\n    const [customErrorsMap, setCustomErrorsMap] = React.useState<CustomErrorsMap>({});\n    const getFieldCustomErrors: ValidationContextValue['getFieldCustomErrors'] = React.useCallback(\n      (fieldName) => customErrorsMap[fieldName] ?? {},\n      [customErrorsMap]\n    );\n    const handleFieldCustomErrorsChange: ValidationContextValue['onFieldCustomErrorsChange'] =\n      React.useCallback((fieldName, customErrors) => {\n        setCustomErrorsMap((prevCustomErrorsMap) => ({\n          ...prevCustomErrorsMap,\n          [fieldName]: { ...(prevCustomErrorsMap[fieldName] ?? {}), ...customErrors },\n        }));\n      }, []);\n\n    // messageIds per field\n    const [messageIdsMap, setMessageIdsMap] = React.useState<MessageIdsMap>({});\n    const handleFieldMessageIdAdd: AriaDescriptionContextValue['onFieldMessageIdAdd'] =\n      React.useCallback((fieldName, id) => {\n        setMessageIdsMap((prevMessageIdsMap) => {\n          const fieldDescriptionIds = new Set(prevMessageIdsMap[fieldName]).add(id);\n          return { ...prevMessageIdsMap, [fieldName]: fieldDescriptionIds };\n        });\n      }, []);\n    const handleFieldMessageIdRemove: AriaDescriptionContextValue['onFieldMessageIdRemove'] =\n      React.useCallback((fieldName, id) => {\n        setMessageIdsMap((prevMessageIdsMap) => {\n          const fieldDescriptionIds = new Set(prevMessageIdsMap[fieldName]);\n          fieldDescriptionIds.delete(id);\n          return { ...prevMessageIdsMap, [fieldName]: fieldDescriptionIds };\n        });\n      }, []);\n    const getFieldDescription: AriaDescriptionContextValue['getFieldDescription'] =\n      React.useCallback(\n        (fieldName) => Array.from(messageIdsMap[fieldName] ?? []).join(' ') || undefined,\n        [messageIdsMap]\n      );\n\n    return (\n      <ValidationProvider\n        scope={__scopeForm}\n        getFieldValidity={getFieldValidity}\n        onFieldValidityChange={handleFieldValidityChange}\n        getFieldCustomMatcherEntries={getFieldCustomMatcherEntries}\n        onFieldCustomMatcherEntryAdd={handleFieldCustomMatcherAdd}\n        onFieldCustomMatcherEntryRemove={handleFieldCustomMatcherRemove}\n        getFieldCustomErrors={getFieldCustomErrors}\n        onFieldCustomErrorsChange={handleFieldCustomErrorsChange}\n        onFieldValiditionClear={handleFieldValiditionClear}\n      >\n        <AriaDescriptionProvider\n          scope={__scopeForm}\n          onFieldMessageIdAdd={handleFieldMessageIdAdd}\n          onFieldMessageIdRemove={handleFieldMessageIdRemove}\n          getFieldDescription={getFieldDescription}\n        >\n          <Primitive.form\n            {...rootProps}\n            ref={composedFormRef}\n            // focus first invalid control when the form is submitted\n            onInvalid={composeEventHandlers(props.onInvalid, (event) => {\n              const firstInvalidControl = getFirstInvalidControl(event.currentTarget);\n              if (firstInvalidControl === event.target) firstInvalidControl.focus();\n\n              // prevent default browser UI for form validation\n              event.preventDefault();\n            })}\n            // clear server errors when the form is re-submitted\n            onSubmit={composeEventHandlers(props.onSubmit, onClearServerErrors, {\n              checkForDefaultPrevented: false,\n            })}\n            // clear server errors when the form is reset\n            onReset={composeEventHandlers(props.onReset, onClearServerErrors)}\n          />\n        </AriaDescriptionProvider>\n      </ValidationProvider>\n    );\n  }\n);\n\nForm.displayName = FORM_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * FormField\n * -----------------------------------------------------------------------------------------------*/\n\nconst FIELD_NAME = 'FormField';\n\ntype FormFieldContextValue = {\n  id: string;\n  name: string;\n  serverInvalid: boolean;\n};\nconst [FormFieldProvider, useFormFieldContext] =\n  createFormContext<FormFieldContextValue>(FIELD_NAME);\n\ntype FormFieldElement = React.ElementRef<typeof Primitive.div>;\ntype PrimitiveDivProps = Radix.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface FormFieldProps extends PrimitiveDivProps {\n  name: string;\n  serverInvalid?: boolean;\n}\n\nconst FormField = React.forwardRef<FormFieldElement, FormFieldProps>(\n  (props: ScopedProps<FormFieldProps>, forwardedRef) => {\n    const { __scopeForm, name, serverInvalid = false, ...fieldProps } = props;\n    const validationContext = useValidationContext(FIELD_NAME, __scopeForm);\n    const validity = validationContext.getFieldValidity(name);\n    const id = useId();\n\n    return (\n      <FormFieldProvider scope={__scopeForm} id={id} name={name} serverInvalid={serverInvalid}>\n        <Primitive.div\n          data-valid={getValidAttribute(validity, serverInvalid)}\n          data-invalid={getInvalidAttribute(validity, serverInvalid)}\n          {...fieldProps}\n          ref={forwardedRef}\n        />\n      </FormFieldProvider>\n    );\n  }\n);\n\nFormField.displayName = FIELD_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * FormLabel\n * -----------------------------------------------------------------------------------------------*/\n\nconst LABEL_NAME = 'FormLabel';\n\ntype FormLabelElement = React.ElementRef<typeof LabelPrimitive>;\ntype LabelProps = Radix.ComponentPropsWithoutRef<typeof LabelPrimitive>;\ninterface FormLabelProps extends LabelProps {}\n\nconst FormLabel = React.forwardRef<FormLabelElement, FormLabelProps>(\n  (props: ScopedProps<FormLabelProps>, forwardedRef) => {\n    const { __scopeForm, ...labelProps } = props;\n    const validationContext = useValidationContext(LABEL_NAME, __scopeForm);\n    const fieldContext = useFormFieldContext(LABEL_NAME, __scopeForm);\n    const htmlFor = labelProps.htmlFor || fieldContext.id;\n    const validity = validationContext.getFieldValidity(fieldContext.name);\n\n    return (\n      <LabelPrimitive\n        data-valid={getValidAttribute(validity, fieldContext.serverInvalid)}\n        data-invalid={getInvalidAttribute(validity, fieldContext.serverInvalid)}\n        {...labelProps}\n        ref={forwardedRef}\n        htmlFor={htmlFor}\n      />\n    );\n  }\n);\n\nFormLabel.displayName = LABEL_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * FormControl\n * -----------------------------------------------------------------------------------------------*/\n\nconst CONTROL_NAME = 'FormControl';\n\ntype FormControlElement = React.ElementRef<typeof Primitive.input>;\ntype PrimitiveInputProps = Radix.ComponentPropsWithoutRef<typeof Primitive.input>;\ninterface FormControlProps extends PrimitiveInputProps {}\n\nconst FormControl = React.forwardRef<FormControlElement, FormControlProps>(\n  (props: ScopedProps<FormControlProps>, forwardedRef) => {\n    const { __scopeForm, ...controlProps } = props;\n\n    const validationContext = useValidationContext(CONTROL_NAME, __scopeForm);\n    const fieldContext = useFormFieldContext(CONTROL_NAME, __scopeForm);\n    const ariaDescriptionContext = useAriaDescriptionContext(CONTROL_NAME, __scopeForm);\n\n    const ref = React.useRef<FormControlElement>(null);\n    const composedRef = useComposedRefs(forwardedRef, ref);\n    const name = controlProps.name || fieldContext.name;\n    const id = controlProps.id || fieldContext.id;\n    const customMatcherEntries = validationContext.getFieldCustomMatcherEntries(name);\n\n    const { onFieldValidityChange, onFieldCustomErrorsChange, onFieldValiditionClear } =\n      validationContext;\n    const updateControlValidity = React.useCallback(\n      async (control: FormControlElement) => {\n        //------------------------------------------------------------------------------------------\n        // 1. first, if we have built-in errors we stop here\n\n        if (hasBuiltInError(control.validity)) {\n          const controlValidity = validityStateToObject(control.validity);\n          onFieldValidityChange(name, controlValidity);\n          return;\n        }\n\n        //------------------------------------------------------------------------------------------\n        // 2. then gather the form data to give to custom matchers for cross-comparisons\n\n        const formData = control.form ? new FormData(control.form) : new FormData();\n        const matcherArgs: CustomMatcherArgs = [control.value, formData];\n\n        //------------------------------------------------------------------------------------------\n        // 3. split sync and async custom matcher entries\n\n        const syncCustomMatcherEntries: Array<SyncCustomMatcherEntry> = [];\n        const ayncCustomMatcherEntries: Array<AsyncCustomMatcherEntry> = [];\n        customMatcherEntries.forEach((customMatcherEntry) => {\n          if (isAsyncCustomMatcherEntry(customMatcherEntry, matcherArgs)) {\n            ayncCustomMatcherEntries.push(customMatcherEntry);\n          } else if (isSyncCustomMatcherEntry(customMatcherEntry)) {\n            syncCustomMatcherEntries.push(customMatcherEntry);\n          }\n        });\n\n        //------------------------------------------------------------------------------------------\n        // 4. run sync custom matchers and update control validity / internal validity + errors\n\n        const syncCustomErrors = syncCustomMatcherEntries.map(({ id, match }) => {\n          return [id, match(...matcherArgs)] as const;\n        });\n        const syncCustomErrorsById = Object.fromEntries(syncCustomErrors);\n        const hasSyncCustomErrors = Object.values(syncCustomErrorsById).some(Boolean);\n        const hasCustomError = hasSyncCustomErrors;\n        control.setCustomValidity(hasCustomError ? DEFAULT_INVALID_MESSAGE : '');\n        const controlValidity = validityStateToObject(control.validity);\n        onFieldValidityChange(name, controlValidity);\n        onFieldCustomErrorsChange(name, syncCustomErrorsById);\n\n        //------------------------------------------------------------------------------------------\n        // 5. run async custom matchers and update control validity / internal validity + errors\n\n        if (!hasSyncCustomErrors && ayncCustomMatcherEntries.length > 0) {\n          const promisedCustomErrors = ayncCustomMatcherEntries.map(({ id, match }) =>\n            match(...matcherArgs).then((matches) => [id, matches] as const)\n          );\n          const asyncCustomErrors = await Promise.all(promisedCustomErrors);\n          const asyncCustomErrorsById = Object.fromEntries(asyncCustomErrors);\n          const hasAsyncCustomErrors = Object.values(asyncCustomErrorsById).some(Boolean);\n          const hasCustomError = hasAsyncCustomErrors;\n          control.setCustomValidity(hasCustomError ? DEFAULT_INVALID_MESSAGE : '');\n          const controlValidity = validityStateToObject(control.validity);\n          onFieldValidityChange(name, controlValidity);\n          onFieldCustomErrorsChange(name, asyncCustomErrorsById);\n        }\n      },\n      [customMatcherEntries, name, onFieldCustomErrorsChange, onFieldValidityChange]\n    );\n\n    React.useEffect(() => {\n      const control = ref.current;\n      if (control) {\n        // We only want validate on change (native `change` event, not React's `onChange`). This is primarily\n        // a UX decision, we don't want to validate on every keystroke and React's `onChange` is the `input` event.\n        const handleChange = () => updateControlValidity(control);\n        control.addEventListener('change', handleChange);\n        return () => control.removeEventListener('change', handleChange);\n      }\n    }, [updateControlValidity]);\n\n    const resetControlValidity = React.useCallback(() => {\n      const control = ref.current;\n      if (control) {\n        control.setCustomValidity('');\n        onFieldValiditionClear(name);\n      }\n    }, [name, onFieldValiditionClear]);\n\n    // reset validity and errors when the form is reset\n    React.useEffect(() => {\n      const form = ref.current?.form;\n      if (form) {\n        form.addEventListener('reset', resetControlValidity);\n        return () => form.removeEventListener('reset', resetControlValidity);\n      }\n    }, [resetControlValidity]);\n\n    // focus first invalid control when fields are set as invalid by server\n    React.useEffect(() => {\n      const control = ref.current;\n      const form = control?.closest('form');\n      if (form && fieldContext.serverInvalid) {\n        const firstInvalidControl = getFirstInvalidControl(form);\n        if (firstInvalidControl === control) firstInvalidControl.focus();\n      }\n    }, [fieldContext.serverInvalid]);\n\n    const validity = validationContext.getFieldValidity(name);\n\n    return (\n      <Primitive.input\n        data-valid={getValidAttribute(validity, fieldContext.serverInvalid)}\n        data-invalid={getInvalidAttribute(validity, fieldContext.serverInvalid)}\n        aria-invalid={fieldContext.serverInvalid ? true : undefined}\n        aria-describedby={ariaDescriptionContext.getFieldDescription(name)}\n        // disable default browser behaviour of showing built-in error message on hover\n        title=\"\"\n        {...controlProps}\n        ref={composedRef}\n        id={id}\n        name={name}\n        onInvalid={composeEventHandlers(props.onInvalid, (event) => {\n          const control = event.currentTarget;\n          updateControlValidity(control);\n        })}\n        onChange={composeEventHandlers(props.onChange, (event) => {\n          // reset validity when user changes value\n          resetControlValidity();\n        })}\n      />\n    );\n  }\n);\n\nFormControl.displayName = CONTROL_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * FormMessage\n * -----------------------------------------------------------------------------------------------*/\n\nconst validityMatchers = [\n  'badInput',\n  'patternMismatch',\n  'rangeOverflow',\n  'rangeUnderflow',\n  'stepMismatch',\n  'tooLong',\n  'tooShort',\n  'typeMismatch',\n  'valid',\n  'valueMissing',\n] as const;\ntype ValidityMatcher = typeof validityMatchers[number];\n\nconst DEFAULT_INVALID_MESSAGE = 'This value is not valid';\nconst DEFAULT_BUILT_IN_MESSAGES: Record<ValidityMatcher, string | undefined> = {\n  badInput: DEFAULT_INVALID_MESSAGE,\n  patternMismatch: 'This value does not match the required pattern',\n  rangeOverflow: 'This value is too large',\n  rangeUnderflow: 'This value is too small',\n  stepMismatch: 'This value does not match the required step',\n  tooLong: 'This value is too long',\n  tooShort: 'This value is too short',\n  typeMismatch: 'This value does not match the required type',\n  valid: undefined,\n  valueMissing: 'This value is missing',\n};\n\nconst MESSAGE_NAME = 'FormMessage';\n\ntype FormMessageElement = FormMessageImplElement;\ninterface FormMessageProps extends Omit<FormMessageImplProps, 'name'> {\n  match?: ValidityMatcher | CustomMatcher;\n  forceMatch?: boolean;\n  name?: string;\n}\n\nconst FormMessage = React.forwardRef<FormMessageElement, FormMessageProps>(\n  (props: ScopedProps<FormMessageProps>, forwardedRef) => {\n    const { match, name: nameProp, ...messageProps } = props;\n    const fieldContext = useFormFieldContext(MESSAGE_NAME, props.__scopeForm);\n    const name = nameProp ?? fieldContext.name;\n\n    if (match === undefined) {\n      return (\n        <FormMessageImpl {...messageProps} ref={forwardedRef} name={name}>\n          {props.children || DEFAULT_INVALID_MESSAGE}\n        </FormMessageImpl>\n      );\n    } else if (typeof match === 'function') {\n      return <FormCustomMessage match={match} {...messageProps} ref={forwardedRef} name={name} />;\n    } else {\n      return <FormBuiltInMessage match={match} {...messageProps} ref={forwardedRef} name={name} />;\n    }\n  }\n);\n\nFormMessage.displayName = MESSAGE_NAME;\n\ntype FormBuiltInMessageElement = FormMessageImplElement;\ninterface FormBuiltInMessageProps extends FormMessageImplProps {\n  match: ValidityMatcher;\n  forceMatch?: boolean;\n  name: string;\n}\n\nconst FormBuiltInMessage = React.forwardRef<FormBuiltInMessageElement, FormBuiltInMessageProps>(\n  (props: ScopedProps<FormBuiltInMessageProps>, forwardedRef) => {\n    const { match, forceMatch = false, name, children, ...messageProps } = props;\n    const validationContext = useValidationContext(MESSAGE_NAME, messageProps.__scopeForm);\n    const validity = validationContext.getFieldValidity(name);\n    const matches = forceMatch || validity?.[match];\n\n    if (matches) {\n      return (\n        <FormMessageImpl ref={forwardedRef} {...messageProps} name={name}>\n          {children ?? DEFAULT_BUILT_IN_MESSAGES[match]}\n        </FormMessageImpl>\n      );\n    }\n\n    return null;\n  }\n);\n\ntype FormCustomMessageElement = React.ElementRef<typeof FormMessageImpl>;\ninterface FormCustomMessageProps extends Radix.ComponentPropsWithoutRef<typeof FormMessageImpl> {\n  match: CustomMatcher;\n  forceMatch?: boolean;\n  name: string;\n}\n\nconst FormCustomMessage = React.forwardRef<FormCustomMessageElement, FormCustomMessageProps>(\n  (props: ScopedProps<FormCustomMessageProps>, forwardedRef) => {\n    const { match, forceMatch = false, name, id: idProp, children, ...messageProps } = props;\n    const validationContext = useValidationContext(MESSAGE_NAME, messageProps.__scopeForm);\n    const ref = React.useRef<FormCustomMessageElement>(null);\n    const composedRef = useComposedRefs(forwardedRef, ref);\n    const _id = useId();\n    const id = idProp ?? _id;\n\n    const customMatcherEntry = React.useMemo(() => ({ id, match }), [id, match]);\n    const { onFieldCustomMatcherEntryAdd, onFieldCustomMatcherEntryRemove } = validationContext;\n    React.useEffect(() => {\n      onFieldCustomMatcherEntryAdd(name, customMatcherEntry);\n      return () => onFieldCustomMatcherEntryRemove(name, customMatcherEntry.id);\n    }, [customMatcherEntry, name, onFieldCustomMatcherEntryAdd, onFieldCustomMatcherEntryRemove]);\n\n    const validity = validationContext.getFieldValidity(name);\n    const customErrors = validationContext.getFieldCustomErrors(name);\n    const hasMatchingCustomError = customErrors[id];\n    const matches =\n      forceMatch || (validity && !hasBuiltInError(validity) && hasMatchingCustomError);\n\n    if (matches) {\n      return (\n        <FormMessageImpl id={id} ref={composedRef} {...messageProps} name={name}>\n          {children ?? DEFAULT_INVALID_MESSAGE}\n        </FormMessageImpl>\n      );\n    }\n\n    return null;\n  }\n);\n\ntype FormMessageImplElement = React.ElementRef<typeof Primitive.span>;\ntype PrimitiveSpanProps = Radix.ComponentPropsWithoutRef<typeof Primitive.span>;\ninterface FormMessageImplProps extends PrimitiveSpanProps {\n  name: string;\n}\n\nconst FormMessageImpl = React.forwardRef<FormMessageImplElement, FormMessageImplProps>(\n  (props: ScopedProps<FormMessageImplProps>, forwardedRef) => {\n    const { __scopeForm, id: idProp, name, ...messageProps } = props;\n    const ariaDescriptionContext = useAriaDescriptionContext(MESSAGE_NAME, __scopeForm);\n    const _id = useId();\n    const id = idProp ?? _id;\n\n    const { onFieldMessageIdAdd, onFieldMessageIdRemove } = ariaDescriptionContext;\n    React.useEffect(() => {\n      onFieldMessageIdAdd(name, id);\n      return () => onFieldMessageIdRemove(name, id);\n    }, [name, id, onFieldMessageIdAdd, onFieldMessageIdRemove]);\n\n    return <Primitive.span id={id} {...messageProps} ref={forwardedRef} />;\n  }\n);\n\n/* -------------------------------------------------------------------------------------------------\n * FormValidityState\n * -----------------------------------------------------------------------------------------------*/\n\nconst VALIDITY_STATE_NAME = 'FormValidityState';\n\ninterface FormValidityStateProps {\n  children(validity: ValidityState | undefined): React.ReactNode;\n  name?: string;\n}\n\nconst FormValidityState = (props: ScopedProps<FormValidityStateProps>) => {\n  const { __scopeForm, name: nameProp, children } = props;\n  const validationContext = useValidationContext(VALIDITY_STATE_NAME, __scopeForm);\n  const fieldContext = useFormFieldContext(VALIDITY_STATE_NAME, __scopeForm);\n  const name = nameProp ?? fieldContext.name;\n  const validity = validationContext.getFieldValidity(name);\n  return <>{children(validity)}</>;\n};\n\nFormValidityState.displayName = VALIDITY_STATE_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * FormSubmit\n * -----------------------------------------------------------------------------------------------*/\n\nconst SUBMIT_NAME = 'FormSubmit';\n\ntype FormSubmitElement = React.ElementRef<typeof Primitive.button>;\ntype PrimitiveButtonProps = Radix.ComponentPropsWithoutRef<typeof Primitive.button>;\ninterface FormSubmitProps extends PrimitiveButtonProps {}\n\nconst FormSubmit = React.forwardRef<FormSubmitElement, FormSubmitProps>(\n  (props: ScopedProps<FormSubmitProps>, forwardedRef) => {\n    const { __scopeForm, ...submitProps } = props;\n    return <Primitive.button type=\"submit\" {...submitProps} ref={forwardedRef} />;\n  }\n);\n\nFormSubmit.displayName = SUBMIT_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype ValidityStateKey = keyof ValidityState;\ntype SyncCustomMatcher = (value: string, formData: FormData) => boolean;\ntype AsyncCustomMatcher = (value: string, formData: FormData) => Promise<boolean>;\ntype CustomMatcher = SyncCustomMatcher | AsyncCustomMatcher;\ntype CustomMatcherEntry = { id: string; match: CustomMatcher };\ntype SyncCustomMatcherEntry = { id: string; match: SyncCustomMatcher };\ntype AsyncCustomMatcherEntry = { id: string; match: AsyncCustomMatcher };\ntype CustomMatcherArgs = [string, FormData];\n\nfunction validityStateToObject(validity: ValidityState) {\n  const object: any = {};\n  for (const key in validity) {\n    object[key] = validity[key as ValidityStateKey];\n  }\n  return object as Record<ValidityStateKey, boolean>;\n}\n\nfunction isHTMLElement(element: any): element is HTMLElement {\n  return element instanceof HTMLElement;\n}\n\nfunction isFormControl(element: any): element is { validity: ValidityState } {\n  return 'validity' in element;\n}\n\nfunction isInvalid(control: HTMLElement) {\n  return (\n    isFormControl(control) &&\n    (control.validity.valid === false || control.getAttribute('aria-invalid') === 'true')\n  );\n}\n\nfunction getFirstInvalidControl(form: HTMLFormElement): HTMLElement | undefined {\n  const elements = form.elements;\n  const [firstInvalidControl] = Array.from(elements).filter(isHTMLElement).filter(isInvalid);\n  return firstInvalidControl;\n}\n\nfunction isAsyncCustomMatcherEntry(\n  entry: CustomMatcherEntry,\n  args: CustomMatcherArgs\n): entry is AsyncCustomMatcherEntry {\n  return entry.match.constructor.name === 'AsyncFunction' || returnsPromise(entry.match, args);\n}\n\nfunction isSyncCustomMatcherEntry(entry: CustomMatcherEntry): entry is SyncCustomMatcherEntry {\n  return entry.match.constructor.name === 'Function';\n}\n\nfunction returnsPromise(func: Function, args: Array<unknown>) {\n  return func(...args) instanceof Promise;\n}\n\nfunction hasBuiltInError(validity: ValidityState) {\n  let error = false;\n  for (const validityKey in validity) {\n    const key = validityKey as ValidityStateKey;\n    if (key !== 'valid' && key !== 'customError' && validity[key]) {\n      error = true;\n      break;\n    }\n  }\n  return error;\n}\n\nfunction getValidAttribute(validity: ValidityState | undefined, serverInvalid: boolean) {\n  if (validity?.valid === true && !serverInvalid) return true;\n  return undefined;\n}\nfunction getInvalidAttribute(validity: ValidityState | undefined, serverInvalid: boolean) {\n  if (validity?.valid === false || serverInvalid) return true;\n  return undefined;\n}\n\n/* -----------------------------------------------------------------------------------------------*/\n\nconst Root = Form;\nconst Field = FormField;\nconst Label = FormLabel;\nconst Control = FormControl;\nconst Message = FormMessage;\nconst ValidityState = FormValidityState;\nconst Submit = FormSubmit;\n\nexport {\n  createFormScope,\n  //\n  Form,\n  FormField,\n  FormLabel,\n  FormControl,\n  FormMessage,\n  FormValidityState,\n  FormSubmit,\n  //\n  Root,\n  Field,\n  Label,\n  Control,\n  Message,\n  ValidityState,\n  Submit,\n};\n\nexport type {\n  FormProps,\n  FormFieldProps,\n  FormLabelProps,\n  FormControlProps,\n  FormMessageProps,\n  FormValidityStateProps,\n  FormSubmitProps,\n};\n"],
  "mappings": "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",
  "names": ["NAME", "Label", "React", "props", "forwardedRef", "$7V4JZ$createElement", "event", "onMouseDown", "defaultPrevented", "detail", "preventDefault", "createFormContext", "createFormScope", "createContextScope", "FORM_NAME", "ValidationProvider", "useValidationContext", "AriaDescriptionProvider", "useAriaDescriptionContext", "Form", "React", "props", "forwardedRef", "rootProps", "formRef", "composedFormRef", "useComposedRefs", "validityMap", "setValidityMap", "getFieldValidity", "fieldName", "handleFieldValidityChange", "validity", "prevValidityMap", "handleFieldValiditionClear", "undefined", "setCustomErrorsMap", "prevCustomErrorsMap", "customMatcherEntriesMap", "setCustomMatcherEntriesMap", "getFieldCustomMatcherEntries", "handleFieldCustomMatcherAdd", "matcherEntry", "prevCustomMatcherEntriesMap", "handleFieldCustomMatcherRemove", "matcherEntryId", "filter", "id", "customErrorsMap", "getFieldCustomErrors", "handleFieldCustomErrorsChange", "customErrors", "messageIdsMap", "setMessageIdsMap", "handleFieldMessageIdAdd", "prevMessageIdsMap", "fieldDescriptionIds", "Set", "add", "handleFieldMessageIdRemove", "delete", "getFieldDescription", "Array", "from", "join", "$RRrwT$createElement", "__scopeForm", "composeEventHandlers", "onInvalid", "event", "firstInvalidControl", "getFirstInvalidControl", "currentTarget", "target", "focus", "preventDefault", "onSubmit", "onClearServerErrors", "checkForDefaultPrevented", "onReset", "FIELD_NAME", "FormFieldProvider", "useFormFieldContext", "FormField", "fieldProps", "validationContext", "name", "useId", "getValidAttribute", "serverInvalid", "getInvalidAttribute", "LABEL_NAME", "FormLabel", "labelProps", "fieldContext", "htmlFor", "CONTROL_NAME", "FormControl", "controlProps", "ariaDescriptionContext", "ref", "composedRef", "customMatcherEntries", "onFieldValiditionClear", "updateControlValidity", "control", "hasBuiltInError", "controlValidity", "validityStateToObject", "onFieldValidityChange", "formData", "form", "FormData", "matcherArgs", "value", "syncCustomMatcherEntries", "ayncCustomMatcherEntries", "forEach", "customMatcherEntry", "isAsyncCustomMatcherEntry", "push", "isSyncCustomMatcherEntry", "syncCustomErrors", "map", "match", "syncCustomErrorsById", "Object", "fromEntries", "hasSyncCustomErrors", "values", "some", "Boolean", "hasCustomError", "setCustomValidity", "DEFAULT_INVALID_MESSAGE", "onFieldCustomErrorsChange", "length", "promisedCustomErrors", "then", "matches", "asyncCustomErrors", "Promise", "all", "asyncCustomErrorsById", "hasAsyncCustomErrors", "current", "handleChange", "addEventListener", "removeEventListener", "resetControlValidity", "closest", "onChange", "DEFAULT_INVALID_MESSAGE", "DEFAULT_BUILT_IN_MESSAGES", "badInput", "patternMismatch", "rangeOverflow", "rangeUnderflow", "stepMismatch", "tooLong", "tooShort", "typeMismatch", "valid", "undefined", "valueMissing", "MESSAGE_NAME", "FormMessage", "React", "props", "forwardedRef", "name", "nameProp", "messageProps", "fieldContext", "useFormFieldContext", "__scopeForm", "match", "$RRrwT$createElement", "children", "FormBuiltInMessage", "validationContext", "useValidationContext", "validity", "getFieldValidity", "matches", "forceMatch", "FormCustomMessage", "id", "idProp", "ref", "composedRef", "useComposedRefs", "_id", "useId", "customMatcherEntry", "onFieldCustomMatcherEntryRemove", "onFieldCustomMatcherEntryAdd", "customErrors", "getFieldCustomErrors", "hasMatchingCustomError", "hasBuiltInError", "FormMessageImpl", "ariaDescriptionContext", "useAriaDescriptionContext", "onFieldMessageIdRemove", "onFieldMessageIdAdd", "VALIDITY_STATE_NAME", "FormValidityState", "$RRrwT$Fragment", "SUBMIT_NAME", "FormSubmit", "submitProps", "validityStateToObject", "object", "key", "isHTMLElement", "element", "HTMLElement", "isFormControl", "isInvalid", "control", "getAttribute", "getFirstInvalidControl", "form", "elements", "firstInvalidControl", "Array", "from", "filter", "isAsyncCustomMatcherEntry", "entry", "args", "constructor", "returnsPromise", "isSyncCustomMatcherEntry", "func", "Promise", "error", "validityKey", "getValidAttribute", "serverInvalid", "getInvalidAttribute", "Root", "Form", "Field", "FormField", "Label", "FormLabel", "Control", "FormControl", "Message", "ValidityState", "Submit"]
}
